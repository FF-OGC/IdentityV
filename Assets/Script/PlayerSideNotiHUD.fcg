import "Hud.fcc" as Hud
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import Resources from "EditorGenLib.fcc"
import "./HUDUtil.fcg" as HUDUtil
import "Convert.fcc" as Convert
import "Workflow.fcc" as Workflow
import "./GlobalGeneratorManager.fcg" as GlobalGeneratorManager
import "./Prison.fcg" as Prison
import "./PlayerRescue.fcg" as PlayerRescue
import "Math.fcc" as Math
import "List.fcc" as List
import "Playable.fcc" as Playable
import "LevelObject.fcc" as LevelObject
import "./PlayerConfig.fcg" as PlayerConfig

graph PlayerSideNotiHUD {
    _PlayerSideNotiHUD entity<CustomHud>
    BG entity<HudWidget>
    Text entity<HudWidget>
    Holder entity<HudWidget>
    Icon entity<HudWidget>
    

    _IsActive bool = false
    _Queue List<List<object>> = List<List<object>>{}
 
    
    event OnPhaseStart(phase entity<Phase>) {
        var phaseIndex = phase<Phase>.PhaseIndex
        if phaseIndex == phaseEnum.IN_PROGRESS {
            if thisEntity<PlayerConfig>.isHuman {
                DisplaySideNotiHUD(#FFB400FF, "Fix Generator To Open Gates", IconType.ExclamationMark as SpriteID, 15000)
            } else {
                DisplaySideNotiHUD(#FFB400FF, "Stop Survivors From Fixing Generators", IconType.ExclamationMark as SpriteID, 15000)
            }
        }

    }

    event Player_EnterPrison(player entity<Player>) {
        if thisEntity<PlayerConfig>.isHuman && thisEntity<Player> != player{
            DisplaySideNotiHUD(#FFB400FF, "Rescue Teammate From Prison", IconType.ExclamationMark as SpriteID, 6000)
        } else if thisEntity<Player> == player {
            DisplaySideNotiHUD(#FFB400FF, "Wait For Teammate To Rescue", IconType.ExclamationMark as SpriteID, 6000)
        }
    }

    event Global_OnFinishTask() {
        if thisEntity<PlayerConfig>.isHuman {
            DisplaySideNotiHUD(#21A700FF, "Open The Gate To Escape", IconType.Exit as SpriteID, 3000)
        } else {
            DisplaySideNotiHUD(#D30000FF, "Stop Survivors From Escaping", IconType.ExclamationMark as SpriteID, 3000)
        }
    }



    event Player_SuccessSkillCheck(player object) {
        DisplaySideNotiHUD(#21A700FF, "Skill Check Success", IconType.ThumbsUp as SpriteID, 3000)
    }

    event Player_FailSkillCheck(player object) {
        if thisEntity<PlayerConfig>.isHuman {
            DisplaySideNotiHUD(#D30000FF, "Skill Check Fail", IconType.Boom as SpriteID, 3000)
        }
        
    }


    
    func InitSideNotiHUD() {
        if (_PlayerSideNotiHUD == nil) {
            _PlayerSideNotiHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>,EResource_UI.SIDENOTI,4)
            _PlayerSideNotiHUD<CustomHud>.Visibility = false
            BG = GetSideNotiHUDWidget(EResource_UI_SIDENOTI.BG)
            Text = GetSideNotiHUDWidget(EResource_UI_SIDENOTI.TEXT)
            Holder = GetSideNotiHUDWidget(EResource_UI_SIDENOTI.HOLDER)
            Icon = GetSideNotiHUDWidget(EResource_UI_SIDENOTI.ICON)

        }
    }

    async func DisplaySideNotiHUD(bgColor Color, text string, icon SpriteID, duration int) {
        InitSideNotiHUD()

        if _IsActive {
            AppendQueue({bgColor, text, icon ,duration})
            return
        }

        BG<HudImageWidget>.Color = bgColor
        Text<HudLabelWidget>.Text = text
        Icon<HudImageWidget>.SpriteName = icon
        _PlayerSideNotiHUD<CustomHud>.Visibility = true
        _IsActive = true
        start PlayAnimation()

        WaitForSeconds(duration)

        CloseSideNotiHUD()

        if Length(_Queue) > 0 {
            ProcessQueue()
        } 
    }
    
    async func CloseSideNotiHUD() {
        if (_PlayerSideNotiHUD != nil) {
            PlayReverseAnimation()
            WaitForSeconds(1000)
            _PlayerSideNotiHUD<CustomHud>.Visibility = false
            _IsActive = false
        }
    }

    async func PlayAnimation() {
        var curve = CreateTweenCurve(List<float>{0,0,0.58,1})
        CreateTween(Holder<HudWidget>,HudWidget.AnchorPosition,Vector3{Holder<HudWidget>.AnchorPosition.X, -50, 0},Vector3{Holder<HudWidget>.AnchorPosition.X, 0, 0}, TweenStyle.Once,curve,1000,out var motion, true)
        CreateTween(Holder<HudEmptyWidget>,HudEmptyWidget.Alpha,0,1, TweenStyle.Once,curve,1000,out var alphamotion, true)
    }

    async func PlayReverseAnimation() {
        var curve = CreateTweenCurve(List<float>{0,0,0.58,1})
        CreateTween(Holder<HudWidget>,HudWidget.AnchorPosition,Vector3{Holder<HudWidget>.AnchorPosition.X, 0, 0},Vector3{Holder<HudWidget>.AnchorPosition.X, -50, 0}, TweenStyle.Once,curve,1000,out var motion, true)
        CreateTween(Holder<HudEmptyWidget>,HudEmptyWidget.Alpha,1,0, TweenStyle.Once,curve,1000,out var alphamotion, true)
    }

    
    func ResetSideNotiHUD(){
            
    }

    func AppendQueue(noti List<object>){
        LogInfo("AppendQueue")
        Append(_Queue, noti)
    }

    func PopQueue() List<object>{
        var noti = _Queue[0]
        DeleteAt(_Queue,0)
        LogInfo("PopQueue: " + _Queue)
        return noti

    }

    async func ProcessQueue(){
        if (Length(_Queue) > 0 ){
            var noti = PopQueue()
            LogInfo("ProcessQueue: " + noti)
            DisplaySideNotiHUD(noti[0] as Color, noti[1] as string, noti[2] as SpriteID, noti[3] as int)
        }
    }
    
    
    
    func GetSideNotiHUDWidget(eResourceUISideNoti string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, _PlayerSideNotiHUD, Resources.UI_SIDENOTI[eResourceUISideNoti])
    }
    
}