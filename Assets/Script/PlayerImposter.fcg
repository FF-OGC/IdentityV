import "Hud.fcc" as hud
import "List.fcc" as list
import "Items.fcc" as items
import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Workflow.fcc" as workflow 
import "./PlayerConfig.fcg" as playerConfig
import "Collection.fcc" as collection
import Resources from "EditorGenLib.fcc"
import "./PlayerScreenEffect.fcg" as playerScreenEffect
import "ChatChannel.fcc" as ChatChannel
import "Player.fcc" as Player
import "Playable.fcc" as Playable
import "Animation.fcc" as Animation
import "Camera.fcc" as Camera
import "Hostility.fcc" as Hostility
import "Physics.fcc" as Physics
import "LevelObject.fcc" as LevelObject
import "./GlobalRole.fcg" as GlobalRole
import "Math.fcc" as Math
import "./PlayerHuman.fcg" as PlayerHuman
import "Combat.fcc" as Combat
import "./GlobalGeneratorManager.fcg" as GlobalGeneratorManager
import "./GlobalPrisonManager.fcg" as GlobalPrisonManager
import Resource from "EditorGenLib.fcc"

graph PlayerImposter {
    BLOOD_REQUIRE = 3
    DELAY_HIT_TIME int = 1000
    RUN_SPEED_SCALE = 1.25
    HEARTBEAT_RANGE = 20.0
    HIT_ANGLE = 180

    bloodLevel int = 0
    _ImposterEffectAfterHit entity<EffectEntity>
    _HitEffect entity<EffectEntity>
    _EffectAfterHitMotion entity<Entity>

    

    event OnPhaseStart(phase entity<Phase>) {
        var phaseIndex = phase<Phase>.PhaseIndex
        if phaseIndex == phaseEnum.PREPARERATION {
        } else if phaseIndex == phaseEnum.IN_PROGRESS {
            DispatchEvent(Player_ChooseAbility,thisEntity,List<object>{AbilityEnum.TELE})
            Transform()
            start SetHeartBeat()

            WaitForNextFrame()
            SwitchPresetCharacterType(thisEntity<Player>,globalEntity<Resource>.ImposterData)
        }
    }

    event Imposter_ChangeImposter(player entity<Player>) {

        DispatchEvent(Player_ChooseAbility,thisEntity,List<object>{AbilityEnum.TELE})
        Transform()
        start SetHeartBeat()
    }

    event OnStartFire() {
        if globalEntity<Global>.CurrentPhaseIndex == phaseEnum.IN_PROGRESS {
            Hit()

            thisEntity<Player>.RunSpeedScale = 0.5
            thisEntity<Player>.CrouchSpeedScale = 0.5
            SetEffect()

            WaitForSeconds(DELAY_HIT_TIME)

            thisEntity<Player>.RunSpeedScale = RUN_SPEED_SCALE
            thisEntity<Player>.CrouchSpeedScale = RUN_SPEED_SCALE
            HideEffect()
        }

    }

    async func SetHeartBeat() {
        while true {
            for key, player in  globalEntity<GlobalRole>.HumanList {
                if Distance(player<Player>.Position,thisEntity<Player>.Position) <= HEARTBEAT_RANGE {
                    player<PlayerHuman>.PlayHeartBeat()
                } else {
                    player<PlayerHuman>.DeleteHeartBeat()
                }
            }
            WaitForSeconds(1000)    
        }
   
    }





    func InitEffectAfterHit() {
        if _ImposterEffectAfterHit != nil{
            return
        }
        CreateEffect(out var effect,thisEntity<Player>, EffectType.Line,LoopType.Loop,true)
        _ImposterEffectAfterHit = effect
        _ImposterEffectAfterHit<Transform>.Rotation = Vector3{0, 0, 180}
        _ImposterEffectAfterHit<Transform>.Scale = Vector3{2, 2, 2}
        CreateFollow(_ImposterEffectAfterHit, thisEntity<Player>, Vector3{0, 2, 0},CoordinateType.LocalPosition,out var followMotion, false)
        _EffectAfterHitMotion = followMotion
        SetActive(_ImposterEffectAfterHit,false)
    }

    func SetEffect() {
        if !_ImposterEffectAfterHit {
            InitEffectAfterHit()
        }

        SetActive(_ImposterEffectAfterHit,true)
        Play(_EffectAfterHitMotion,true)
    }

    func HideEffect() {
        SetActive(_ImposterEffectAfterHit,false)
        Pause(_EffectAfterHitMotion)
    }

    

    func Check() bool{
        return thisEntity<playerConfig>.isImposter 
    }

    // func NormalTransform() {
    //     SetCloth(thisEntity<Player>, Resources.Cloth[EResource_Cloth.Imposter] as ClothID)
    // }

    func SuperTransform() {
        SetCloth(thisEntity<Player>, Resources.Cloth[EResource_Cloth.Imposter] as ClothID)
        AddItemToPlayer(thisEntity<Player>,ItemIDType.Sickle,1, out var itemList)
        var weapon = itemList[0]
        thisEntity<Player>.HPMAX = 500
        thisEntity<Player>.HP = 500
        thisEntity<Player>.RunSpeedScale = RUN_SPEED_SCALE
        thisEntity<Player>.WeaponDamageRate = 0
        thisEntity<Player>.IsSkipStaggerAnimation = true
        
        weapon<Weapon>.RepeatFireInterval = DELAY_HIT_TIME/1000
        
        // SetCamera()
    }

    func Transform() {
        if Check() {
            thisEntity<playerScreenEffect>.SetImposterScreenEffect()
            SuperTransform()
        }
    }

    // func TransformBack() {
    //     if Check() {
    //         ResetCloth(thisEntity<Player>)
    //         RemoveItem(thisEntity<Player>,ItemIDType.Sickle,1)
    //     }
    // }
    

    // func DrinkBlood() {
    //     if Check() {
    //         if bloodLevel < BLOOD_REQUIRE {
    //             bloodLevel ++
    //         }
    //     }
    // }

    // func ResetBloodLevel() {
    //     if Check() {
    //         bloodLevel = 0
    //     }
    // }

    func SetCamera() {
        if Check() {
            var camera = thisEntity<Player>.CurrentCamera
            camera<CameraConfig>.CameraType = CameraType.FirstPerson
            camera<CameraConfig>.FOV = 90
            camera<CameraConfig>.Offset = Vector3{5, 5, 5}
        }
    }

    func LightsOff(){
        if Check() {

        }
    }

    func Sabotage() {
        if Check() {

        }
    }

    func Tele() {
        if Check() {

        }
    }

    func SetChatChannel() {
        if Check() {
            JoinChatChannel(thisEntity<Player> as entity<Player>,GetChatChannel(FreeChatChannel.Channel_1))
        }
    }

    func InitHitEffect() {
        if _HitEffect == nil {
            CreateEffect(out var hitEffect,nil,"UGC_T_37_WZY_WS_VFX4" as EffectType,LoopType.Once,true)
            _HitEffect = hitEffect
            _HitEffect<Transform>.Scale = Vector3{5, 5, 5}
            _HitEffect<EffectEntity>.Color = #FF0000FF
        }
    }

    async func PlayHitEffect() {
        InitHitEffect()
        _HitEffect<Transform>.Position = thisEntity<Player>.Position
        var angle = thisEntity<Player>.Forward
        _HitEffect<Transform>.Rotation = angle
        SetActive(_HitEffect,true)
        WaitForSeconds(700)
        SetActive(_HitEffect,false)
    }

    async func Hit() {
        // SphereCast(3,thisEntity<Player>.Position,thisEntity<Player>.Forward,1, List<int>{}, false, out var hitEntites)
        // BoxCast(Vector3{2, 2, 2},thisEntity<Player>.Position,Vector3{0, 0, 0},thisEntity<Player>.Forward,1, List<int>{}, true, out var hitEntites)
        // LogInfo("Hit Entities: " + hitEntites)

        start PlayHitEffect()

        for key, player in globalEntity<GlobalRole>.HumanList {
            if globalEntity<GlobalPrisonManager>.IsPrisoner(player) {
                return
            }

            if Distance(player<Player>.Position,thisEntity<Player>.Position) <= 3 {
                var targetDirection = player<Player>.Position - thisEntity<Player>.Position
                var angle = Angel(thisEntity<Player>.Forward, targetDirection)
                if angle >= -HIT_ANGLE && angle <= HIT_ANGLE {
                    player<Player>.HP -= 100
                    if player<Player>.HP <= 0 {
                        Kill(player)
                    }
                    LogInfo("Hit Player: " + player)
                    DispatchEvent(Player_ReceiveDamage,player,List<object>{player,100})
                    DispatchEvent(Player_ReceiveDamage,globalEntity,List<object>{player,100})
                }

                
            }
        }
    }


}